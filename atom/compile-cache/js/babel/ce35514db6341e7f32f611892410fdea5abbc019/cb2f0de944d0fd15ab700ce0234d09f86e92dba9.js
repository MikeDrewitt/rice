Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;
exports.consumeStatusBar = consumeStatusBar;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _underscorePlus = require('underscore-plus');

var _underscorePlus2 = _interopRequireDefault(_underscorePlus);

var _atom = require('atom');

var _statusBarItem = require('./status-bar-item');

var _statusBarItem2 = _interopRequireDefault(_statusBarItem);

var _helpers = require('./helpers');

var _helpers2 = _interopRequireDefault(_helpers);

'use babel';

var LineEndingRegExp = /\r\n|\n|\r/g;

var disposables = null;
var modalPanel = null;

function activate() {
  disposables = new _atom.CompositeDisposable();

  disposables.add(atom.commands.add('atom-text-editor', {
    'line-ending-selector:show': function lineEndingSelectorShow(event) {
      if (!modalPanel) {
        var LineEndingListView = require('./line-ending-list-view');

        modalPanel = atom.workspace.addModalPanel({
          item: new LineEndingListView(function (lineEnding) {
            if (lineEnding) {
              setLineEnding(atom.workspace.getActivePaneItem(), lineEnding);
            }
            modalPanel.hide();
          })
        });

        disposables.add(new _atom.Disposable(function () {
          modalPanel.destroy();
          modalPanel = null;
        }));
      }

      modalPanel.show();
      modalPanel.getItem().reset();
    },

    'line-ending-selector:convert-to-LF': function lineEndingSelectorConvertToLF(event) {
      var editorElement = event.target.closest('atom-text-editor');
      setLineEnding(editorElement.getModel(), '\n');
    },

    'line-ending-selector:convert-to-CRLF': function lineEndingSelectorConvertToCRLF(event) {
      var editorElement = event.target.closest('atom-text-editor');
      setLineEnding(editorElement.getModel(), '\r\n');
    }
  }));
}

function deactivate() {
  disposables.dispose();
}

function consumeStatusBar(statusBar) {
  var statusBarItem = new _statusBarItem2['default']();
  var currentBufferDisposable = null;

  function updateTile(buffer) {
    var lineEndings = getLineEndings(buffer);
    if (lineEndings.size === 0) {
      var defaultLineEnding = getDefaultLineEnding();
      buffer.setPreferredLineEnding(defaultLineEnding);
      lineEndings = new Set().add(defaultLineEnding);
    }
    statusBarItem.setLineEndings(lineEndings);
  }

  var debouncedUpdateTile = _underscorePlus2['default'].debounce(updateTile, 0);

  disposables.add(atom.workspace.observeActivePaneItem(function (item) {
    if (currentBufferDisposable) currentBufferDisposable.dispose();

    if (item && item.getBuffer) {
      (function () {
        var buffer = item.getBuffer();
        updateTile(buffer);
        currentBufferDisposable = buffer.onDidChange(function (_ref) {
          var oldText = _ref.oldText;
          var newText = _ref.newText;

          if (!statusBarItem.hasLineEnding('\n')) {
            if (newText.indexOf('\n') >= 0) {
              debouncedUpdateTile(buffer);
            }
          } else if (!statusBarItem.hasLineEnding('\r\n')) {
            if (newText.indexOf('\r\n') >= 0) {
              debouncedUpdateTile(buffer);
            }
          } else if (LineEndingRegExp.test(oldText)) {
            debouncedUpdateTile(buffer);
          }
        });
      })();
    } else {
      statusBarItem.setLineEndings(new Set());
      currentBufferDisposable = null;
    }
  }));

  disposables.add(new _atom.Disposable(function () {
    if (currentBufferDisposable) currentBufferDisposable.dispose();
  }));

  statusBarItem.onClick(function () {
    atom.commands.dispatch(atom.views.getView(atom.workspace.getActivePaneItem()), 'line-ending-selector:show');
  });

  var tile = statusBar.addRightTile({ item: statusBarItem.element, priority: 200 });
  disposables.add(new _atom.Disposable(function () {
    return tile.destroy();
  }));
}

function getDefaultLineEnding() {
  switch (atom.config.get('line-ending-selector.defaultLineEnding')) {
    case 'LF':
      return '\n';
    case 'CRLF':
      return '\r\n';
    case 'OS Default':
    default:
      return _helpers2['default'].getProcessPlatform() === 'win32' ? '\r\n' : '\n';
  }
}

function getLineEndings(buffer) {
  var result = new Set();
  for (var i = 0; i < buffer.getLineCount() - 1; i++) {
    result.add(buffer.lineEndingForRow(i));
  }
  return result;
}

function setLineEnding(item, lineEnding) {
  if (item && item.getBuffer) {
    var buffer = item.getBuffer();
    buffer.setPreferredLineEnding(lineEnding);
    buffer.setText(buffer.getText().replace(LineEndingRegExp, lineEnding));
  }
}
//# sourceMappingURL=data:application/json;base64,