Object.defineProperty(exports, '__esModule', {
  value: true
});

var updateProcessEnv = _asyncToGenerator(function* (launchEnv) {
  var envToAssign = undefined;
  if (launchEnv) {
    if (shouldGetEnvFromShell(launchEnv)) {
      envToAssign = yield getEnvFromShell(launchEnv);
    } else if (launchEnv.PWD) {
      envToAssign = launchEnv;
    }
  }

  if (envToAssign) {
    for (var key in process.env) {
      if (!ENVIRONMENT_VARIABLES_TO_PRESERVE.has(key)) {
        delete process.env[key];
      }
    }

    for (var key in envToAssign) {
      if (!ENVIRONMENT_VARIABLES_TO_PRESERVE.has(key) || !process.env[key] && envToAssign[key]) {
        process.env[key] = envToAssign[key];
      }
    }

    if (envToAssign.ATOM_HOME && _fs2['default'].existsSync(envToAssign.ATOM_HOME)) {
      process.env.ATOM_HOME = envToAssign.ATOM_HOME;
    }
  }
});

var getEnvFromShell = _asyncToGenerator(function* (env) {
  var _ref = yield new Promise(function (resolve) {
    var child = undefined;
    var error = undefined;
    var stdout = '';
    var done = false;
    var cleanup = function cleanup() {
      if (!done && child) {
        child.kill();
        done = true;
      }
    };
    process.once('exit', cleanup);
    setTimeout(function () {
      cleanup();
    }, 5000);
    child = _child_process2['default'].spawn(env.SHELL, ['-ilc', 'command env'], { encoding: 'utf8', detached: true, stdio: ['ignore', 'pipe', process.stderr] });
    var buffers = [];
    child.on('error', function (e) {
      done = true;
      error = e;
    });
    child.stdout.on('data', function (data) {
      buffers.push(data);
    });
    child.on('close', function (code, signal) {
      done = true;
      process.removeListener('exit', cleanup);
      if (buffers.length) {
        stdout = Buffer.concat(buffers).toString('utf8');
      }

      resolve({ stdout: stdout, error: error });
    });
  });

  var stdout = _ref.stdout;
  var error = _ref.error;

  if (error) {
    if (error.handle) {
      error.handle();
    }
    console.log('warning: ' + env.SHELL + ' -ilc "command env" failed with signal (' + error.signal + ')');
    console.log(error);
  }

  if (!stdout || stdout.trim() === '') {
    return null;
  }

  var result = {};
  for (var line of stdout.split('\n')) {
    if (line.includes('=')) {
      var components = line.split('=');
      var key = components.shift();
      var value = components.join('=');
      result[key] = value;
    }
  }
  return result;
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/** @babel */

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var ENVIRONMENT_VARIABLES_TO_PRESERVE = new Set(['NODE_ENV', 'NODE_PATH', 'ATOM_HOME', 'ATOM_DISABLE_SHELLING_OUT_FOR_ENVIRONMENT']);

var PLATFORMS_KNOWN_TO_WORK = new Set(['darwin', 'linux']);

function shouldGetEnvFromShell(env) {
  if (!PLATFORMS_KNOWN_TO_WORK.has(process.platform)) {
    return false;
  }

  if (!env || !env.SHELL || env.SHELL.trim() === '') {
    return false;
  }

  if (env.ATOM_DISABLE_SHELLING_OUT_FOR_ENVIRONMENT || process.env.ATOM_DISABLE_SHELLING_OUT_FOR_ENVIRONMENT) {
    return false;
  }

  return true;
}

exports['default'] = { updateProcessEnv: updateProcessEnv, shouldGetEnvFromShell: shouldGetEnvFromShell };
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,