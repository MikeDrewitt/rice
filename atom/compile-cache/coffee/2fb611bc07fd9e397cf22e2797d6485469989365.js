(function() {
  var DefaultDirectorySearcher, DirectorySearch, Task,
    slice = [].slice;

  Task = require('./task');

  DirectorySearch = (function() {
    function DirectorySearch(rootPaths, regex, options) {
      var scanHandlerOptions;
      scanHandlerOptions = {
        ignoreCase: regex.ignoreCase,
        inclusions: options.inclusions,
        includeHidden: options.includeHidden,
        excludeVcsIgnores: options.excludeVcsIgnores,
        globalExclusions: options.exclusions,
        follow: options.follow
      };
      this.task = new Task(require.resolve('./scan-handler'));
      this.task.on('scan:result-found', options.didMatch);
      this.task.on('scan:file-error', options.didError);
      this.task.on('scan:paths-searched', options.didSearchPaths);
      this.promise = new Promise((function(_this) {
        return function(resolve, reject) {
          _this.task.on('task:cancelled', reject);
          return _this.task.start(rootPaths, regex.source, scanHandlerOptions, function() {
            _this.task.terminate();
            return resolve();
          });
        };
      })(this));
    }

    DirectorySearch.prototype.then = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.promise.then.apply(this.promise, args);
    };

    DirectorySearch.prototype.cancel = function() {
      this.task.cancel();
      return null;
    };

    return DirectorySearch;

  })();

  module.exports = DefaultDirectorySearcher = (function() {
    function DefaultDirectorySearcher() {}

    DefaultDirectorySearcher.prototype.canSearchDirectory = function(directory) {
      return true;
    };

    DefaultDirectorySearcher.prototype.search = function(directories, regex, options) {
      var directorySearch, isCancelled, promise, rootPaths;
      rootPaths = directories.map(function(directory) {
        return directory.getPath();
      });
      isCancelled = false;
      directorySearch = new DirectorySearch(rootPaths, regex, options);
      promise = new Promise(function(resolve, reject) {
        return directorySearch.then(resolve, function() {
          if (isCancelled) {
            return resolve();
          } else {
            return reject();
          }
        });
      });
      return {
        then: promise.then.bind(promise),
        "catch": promise["catch"].bind(promise),
        cancel: function() {
          isCancelled = true;
          return directorySearch.cancel();
        }
      };
    };

    return DefaultDirectorySearcher;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
